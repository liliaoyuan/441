*-----------------------------------------------------------
* Title      :
* Written by :
* Date       :
* Description:
*-----------------------------------------------------------
    ORG    $1000
START:                  ; first instruction of program

* Put program code hereTART:                  ; first instruction of program
 
    ;INITIALIZE ERROR VECTORS 
    MOVE.L #BUSERRORFUNCTION,$08
    MOVE.L #ADDRESSERRORFUNCTION,$0C
    MOVE.L #ILLEGALINSTRUCTIONFUNCTION,$10
    MOVE.L #PRIVELEGEVIOLATIONFUNCTION,$20
    MOVE.L #DIVIDEBYZEROFUNCTION,$14
    MOVE.L #CHECKINSTRUCTIONFUNCTION,$18
    MOVE.L #LINEAEMULATORFUNCTION,$28
    MOVE.L #LINEFEMULATORFUNCTION,$2C   

pSTART ; Prints the Monitor prompt and saves the registers
    MOVEM.L A0-A6/D0-D7,-(SP)   
    MOVEA.L #PROMPT,A1 
    MOVE.B #14,D0
    TRAP #15
    LEA $4000,A1
    MOVE.B #2,D0
    TRAP #15
    
    
    *COMPARING INPUT TO THE MENU ITEMS*
    MOVE.L #HELPPROMPT,A0
    CLR.L D3 ;COUNTER FOR REVERSING A1 TO USER INPUT
COMPAREHELP
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPAREMDSP
    CMPI.B #00,-1(A0)   ;CHECK IF THE BYTE JUST COMPARED WAS NULL TERMINATOR
    BNE COMPAREHELP
    BSR HELPFUNCTION 

COMPAREMDSP
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #MDSPPROMPT,A0
COMPAREMDSP2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPARESORTW
    CMPI.B #32,-1(A0)  ;COMPARING LAST PART TO SPACE TO SEE IF THE STRING ENDS WITH A SPACE
    BNE COMPAREMDSP2
    ;CHECK FOR THE ARGUMENTS
    CLR.L D4 ;FIRST ARG
    CLR.L D5 ;SECOND ARG
CMPMDSPL1
    ADD.B (A1)+,D4   ; MOVE THE MEMORY LOCATION NUMBER TO D4
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ MDSPFUNCTION1 ;FUNCTION FOR 1 ARG
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPMDSPL2
    LSL.L #8,D4
    BSR CMPMDSPL1
CMPMDSPL2
    ADD.B (A1)+,D5   ; MOVE THE SECOND MEMORY LOCATION NUMBER TO D5
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ MDSPFUNCTION2 ;FUNCTION FOR 2 ARG
    LSL.L #8,D5
    BSR CMPMDSPL2
    
   
COMPARESORTW   ;3 arguments, d4 is start,d5 is end, d6 is the ascending or descending
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #SORTWPROMPT,A0
COMPARESORTW2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPAREMM
    CMPI.B #32,-1(A0)  ;COMPARING LAST PART TO SPACE TO SEE IF THE STRING ENDS WITH A SPACE
    BNE COMPARESORTW2
   ;CHECK FOR THE ARGUMENTS
    CLR.L D4 ;FIRST ARG
    CLR.L D5 ;SECOND ARG
    CLR.L D6 ;THIRD ARG
CMPSORTWL1
    ADD.B (A1)+,D4   ; MOVE THE MEMORY LOCATION NUMBER TO D4
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ SORTWHELP ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPSORTWL2
    LSL.L #8,D4
    BRA CMPSORTWL1
CMPSORTWL2
    ADD.B (A1)+,D5   ; MOVE THE MEMORY LOCATION NUMBER TO D5
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ SORTWHELP ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPSORTWL3
    LSL.L #8,D5
    BRA CMPSORTWL2
CMPSORTWL3
    ADD.B 1(A1),D6   ; MOVE THE SECOND MEMORY LOCATION AFTER SPACE TO D5
    CMP.B #'A',D6  ;COMPARING LAST PART TO a or l
    BEQ SORTWFUNCTION
 ;FUNCTION 
    CMP.B #'D',D6 
    BEQ SORTWFUNCTION ;FUNCTION
    ;D4 GIVES THE ADDRESS D5 GIVES THE MODE
    BRA SORTWHELP ;IF END IS NOT EQUAL FAIL AND EXIT


COMPAREMM
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #MMPROMPT,A0
COMPAREMM2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPAREMS
    CMPI.B #32,-1(A0)  ;COMPARING LAST PART TO SPACE TO SEE IF THE STRING ENDS WITH A SPACE
    BNE COMPAREMM2
   ;CHECK FOR THE ARGUMENTS
    CLR.L D4 ;FIRST ARG
    CLR.L D5 ;SECOND ARG
CMPMML1
    ADD.B (A1)+,D4   ; MOVE THE MEMORY LOCATION NUMBER TO D4
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ MMHELP ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPMML2
    LSL.L #8,D4
    BSR CMPMML1
CMPMML2
    ADD.B 1(A1),D5   ; MOVE THE SECOND MEMORY LOCATION AFTER SPACE TO D5
    CMP.B #'B',D5  ;COMPARING LAST PART TO B,W OR L
    BEQ MMFUNCTION ;FUNCTION 
    CMP.B #'W',D5 
    BEQ MMFUNCTION ;FUNCTION
    CMP.B #'L',D5  
    BEQ MMFUNCTION ;FUNCTION
    ;D4 GIVES THE ADDRESS D5 GIVES THE MODE
    BRA MMHELP ;IF END IS NOT EQUAL FAIL AND EXIT


COMPAREMS ;SEND 3 ARGUMENTS, D4 IS MEMLOC, D5 IS DATA, D6 IS ASCII OR HEX
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #MSPROMPT,A0
COMPAREMS2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPAREBF
    CMPI.B #32,-1(A0)  ;COMPARING LAST PART TO SPACE TO SEE IF THE STRING ENDS WITH A SPACE
    BNE COMPAREMS2
   ;CHECK FOR THE ARGUMENTS
    CLR.L D4 ;FIRST ARG
    CLR.L D5 ;SECOND ARG
    CLR.L D6 ;THIRD ARG
CMPMSL1
    ADD.B (A1)+,D4   ; MOVE THE MEMORY LOCATION NUMBER TO D4
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ MSHELP ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPMSL2
    LSL.L #8,D4
    BRA CMPMSL1
CMPMSL2
    ADD.B (A1)+,D5   ; MOVE THE MEMORY LOCATION NUMBER TO D5
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ MSHELP ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPMSL3
    LSL.L #8,D5
    BRA CMPMSL2
CMPMSL3
    ADD.B 1(A1),D6   ; MOVE THE SECOND MEMORY LOCATION AFTER SPACE TO D5
    CMP.B #'H',D6  ;COMPARING LAST PART TO B,W OR L
    BEQ MSFUNCTION ;FUNCTION 
    CMP.B #'A',D6 
    BEQ MSFUNCTION ;FUNCTION
    ;D4 GIVES THE ADDRESS D5 GIVES THE MODE
    BRA MSHELP ;IF END IS NOT EQUAL FAIL AND EXIT


COMPAREBF ;D4 IS BEGGINING ADDRESS, D5 IS END ADDRESS, D6 IS THE WORD DATA TO BE STORED
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #BFPROMPT,A0
COMPAREBF2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPAREBMOV
    CMPI.B #32,-1(A0)  ;COMPARING LAST PART TO SPACE TO SEE IF THE STRING ENDS WITH A SPACE
    BNE COMPAREBF2
   ;CHECK FOR THE ARGUMENTS
    CLR.L D4 ;FIRST ARG
    CLR.L D5 ;SECOND ARG
    CLR.L D6 ;THIRD ARG
CMPBFL1
    ADD.B (A1)+,D4   ; MOVE THE MEMORY LOCATION NUMBER TO D4
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ BFHELP ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPBFL2
    LSL.L #8,D4
    BRA CMPBFL1
CMPBFL2
    ADD.B (A1)+,D5   ; MOVE THE MEMORY LOCATION NUMBER TO D5
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ BFHELP ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPBFL3
    LSL.L #8,D5
    BRA CMPBFL2
CMPBFL3
    ADD.B (A1)+,D6   ; MOVE THE MEMORY LOCATION NUMBER TO D5
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ BFFUNCTION ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ BFHELP
    LSL.L #8,D6
    BRA CMPBFL3

COMPAREBMOV ;D4 IS THE START OF MOV, D5 IS THE END OF MOV, D6 IS THE DESTINATION OF THE MOVE
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #BMOVPROMPT,A0
COMPAREBMOV2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPAREBTST
    CMPI.B #32,-1(A0)  ;COMPARING LAST PART TO SPACE TO SEE IF THE STRING ENDS WITH A SPACE
    BNE COMPAREBMOV2
   ;CHECK FOR THE ARGUMENTS
    CLR.L D4 ;FIRST ARG
    CLR.L D5 ;SECOND ARG
    CLR.L D6 ;THIRD ARG
CMPBMOVL1
    ADD.B (A1)+,D4   ; MOVE THE MEMORY LOCATION NUMBER TO D4
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ BMOVHELP ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPBMOVL2
    LSL.L #8,D4
    BRA CMPBMOVL1
CMPBMOVL2
    ADD.B (A1)+,D5   ; MOVE THE MEMORY LOCATION NUMBER TO D5
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ BMOVHELP ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPBMOVL3
    LSL.L #8,D5
    BRA CMPBMOVL2
CMPBMOVL3
    ADD.B (A1)+,D6   ; MOVE THE MEMORY LOCATION NUMBER TO D5
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ BMOVFUNCTION
 ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ BMOVHELP
    LSL.L #8,D6
    BRA CMPBMOVL3
    
    
COMPAREBTST  ;D4 IS START D5 IS END
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #BTSTPROMPT,A0
COMPAREBTST2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPAREBSCH
    CMPI.B #32,-1(A0)  ;COMPARING LAST PART TO SPACE TO SEE IF THE STRING ENDS WITH A SPACE
    BNE COMPAREBTST2
   ;CHECK FOR THE ARGUMENTS
    CLR.L D4 ;FIRST ARG
    CLR.L D5 ;SECOND ARG

CMPBTSTL1
    ADD.B (A1)+,D4  ; MOVE THE START MEMORY LOCATION NUMBER TO D4
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ BTSTHELP        ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPBTSTL2
    LSL.L #8,D4
    BRA CMPBTSTL1
CMPBTSTL2
    ADD.B (A1)+,D5   ; MOVE THE MEMORY LOCATION NUMBER TO D5
    CMPI.B #0,(A1)   ;COMPARING LAST PART TO EMPTY STRNG
    BEQ BTSTFUNCTION         ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1)  ;COMPARING LAST PART TO SPACE
    BEQ BTSTHELP
    LSL.L #8,D5
    BRA CMPBTSTL2

COMPAREBSCH  ;D4 GIVES START ADDRESS, D5 GIVES END ADDRESS, D6 GIVES THE WORD BEING SEARCHED
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #BSCHPROMPT,A0
COMPAREBSCH2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPAREGO
    CMPI.B #32,-1(A0)  ;COMPARING LAST PART TO SPACE TO SEE IF THE STRING ENDS WITH A SPACE
    BNE COMPAREBSCH2
   ;CHECK FOR THE ARGUMENTS
    CLR.L D4 ;FIRST ARG
    CLR.L D5 ;SECOND ARG
    CLR.L D6 ;THIRD ARG
CMPBSCHL1
    ADD.B (A1)+,D4  ; MOVE THE START MEMORY LOCATION NUMBER TO D4
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ BSCHHELP        ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPBSCHL2
    LSL.L #8,D4
    BRA CMPBSCHL1
CMPBSCHL2
    ADD.B (A1)+,D5   ; MOVE THE MEMORY LOCATION NUMBER TO D5
    CMPI.B #0,(A1)   ;COMPARING LAST PART TO EMPTY STRNG
    BEQ BSCHHELP         ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1)  ;COMPARING LAST PART TO SPACE
    BEQ CMPBSCHL3
    LSL.L #8,D5
    BRA CMPBSCHL2
CMPBSCHL3
    ADD.B (A1)+,D6   ; MOVE THE MEMORY LOCATION NUMBER TO D5
    CMPI.B #0,(A1)   ;COMPARING LAST PART TO EMPTY STRNG
    BEQ BSCHFUNCTION
                     ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1)  ;COMPARING LAST PART TO SPACE
    BEQ BSCHHELP
    LSL.L #8,D6
    BRA CMPBSCHL3

COMPAREGO ;D4 IS THE ARGUMENT TO GET TO THE MEMLOC
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #GOPROMPT,A0
COMPAREGO2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPAREDF
    CMPI.B #32,-1(A0)  ;COMPARING LAST PART TO SPACE TO SEE IF THE STRING ENDS WITH A SPACE
    BNE COMPAREGO2
   ;CHECK FOR THE ARGUMENTS
    CLR.L D4 ;FIRST ARG
    CLR.L D5 ;SECOND ARG
    CLR.L D6 ;THIRD ARG
CMPGOL1
    ADD.B (A1)+,D4  ; MOVE THE START MEMORY LOCATION NUMBER TO D4
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ GOFUNCTION  ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ GOHELP
    LSL.L #8,D4
    BRA CMPGOL1

COMPAREDF
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #DFPROMPT,A0
COMPAREDF2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPARECONVERT
    CMPI.B #0,-1(A0)
    BNE COMPAREDF2
    BSR DFFUNCTION



COMPARECONVERT
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #CONVERT,A0
COMPARECONVERT2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPAREREGCLR
    CMPI.B #32,-1(A0)  ;COMPARING LAST PART TO SPACE TO SEE IF THE STRING ENDS WITH A SPACE
    BNE COMPARECONVERT2
   ;CHECK FOR THE ARGUMENTS
    CLR.L D4 ;FIRST ARG
    CLR.L D5 ;SECOND ARG
CMPCONVERTL1
    ADD.B (A1)+,D4   ; MOVE THE MEMORY LOCATION NUMBER TO D4
    CMPI.B #0,(A1)  ;COMPARING LAST PART TO EMPTY STRNG
    BEQ CONVERTHELP ;FAILS IF NO MEM IS GIVEN
    CMPI.B #32,(A1) ;COMPARING LAST PART TO SPACE
    BEQ CMPCONVERTL2
    LSL.L #8,D4
    BSR CMPCONVERTL1
CMPCONVERTL2
    ADD.B 1(A1),D5   ; MOVE THE SECOND MEMORY LOCATION AFTER SPACE TO D5
    CMP.B #'A',D5  ;COMPARING LAST PART TO B,W OR L
    BEQ CONVERTFUNCTION ;FUNCTION 
    CMP.B #'H',D5 
    BEQ CONVERTFUNCTION ;FUNCTION
    ;D4 GIVES THE ADDRESS D5 GIVES THE MODE
    BRA CONVERTHELP ;IF END IS NOT EQUAL FAIL AND EXIT



 

COMPAREREGCLR
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #REGCLRPROMPT,A0
COMPAREREGCLR2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE COMPAREEXIT
    CMPI.B #0,-1(A0)
    BNE COMPAREREGCLR2
    BSR REGCLRFUNCTION 
    
COMPAREEXIT
    SUB.L D3,A1
    CLR.L D3
    MOVE.L #EXITPROMPT,A0
COMPAREEXIT2
    ADD.L #1,D3
    CMPM.B (A0)+,(A1)+
    BNE FAIL
    CMPI.B #0,-1(A0)
    BNE COMPAREEXIT2
    BSR EXITFUNCTION 
ROL #8,D1
    MOVE.B #6,D0
    TRAP #15
    
    ROL #8,D1
    MOVE.B #6,D0
    TRAP #15
    
    SWAP D1
    ROL #8,D1
    MOVE.B #6,D0
    TRAP #15
    
    ROL #8,D1
    MOVE.B #6,D0
    TRAP #15

    
    ;PRINT SEMICOLON
    MOVEA.L #SEMICOLONSEP,A1     
    MOVE.B #14,D0
    TRAP #15
    
    ;PRINT CONTENT
    CLR.L D1
    MOVE.B (A2)+,D1
    BSR HEXTOASCII 
     
    ;bit manipulation that helps with printing memory location by byte
    ROR #8,D1
    MOVE.B #6,D0
    TRAP #15
    
    ROR #8,D1
    MOVE.B #6,D0
    TRAP #15
    
    ;PRINT empty space
    MOVEA.L #SPACE,A1     
    MOVE.B #13,D0
    TRAP #15
    
    
    CMPA.L A2,A3
    BGT MDSPFUNCTION1L1
    

    MOVEM.L (SP)+, A0-A6/D0-D7
    BRA pSTART


Case 2: 

MDSPFUNCTION2 ;argument passed as D4 and D5, PRINT FROM D4 TO D5
    BSR ASCIITOHEX
    ;DISPLAY EVERYTHIGN FROM D4 TO D5\
    MOVE.L D4,A2 ;BEGGINING
    MOVE.L D5,D4
    BSR ASCIITOHEX
    MOVE.L D4,A3 ;ENDING
    ADD.L #1,A3
MDSPFUNCTION2L1 
  ;PRINT MEMLOC
    MOVE.L A2,D1
    BSR HEXTOASCII 
     
    SWAP D1
    
    ROL #8,D1
    MOVE.B #6,D0
    TRAP #15
    
    ROL #8,D1
    MOVE.B #6,D0
    TRAP #15
    
    SWAP D1
    ROL #8,D1
    MOVE.B #6,D0
    TRAP #15
    
    ROL #8,D1
    MOVE.B #6,D0
    TRAP #15

    
    ;PRINT SEMICOLON
    MOVEA.L #SEMICOLONSEP,A1     
    MOVE.B #14,D0
    TRAP #15
    
    ;PRINT CONTENT
    CLR.L D1
    MOVE.B (A2)+,D1
    BSR HEXTOASCII 
     
    
    ROR #8,D1
    MOVE.B #6,D0
    TRAP #15
    
    ROR #8,D1
    MOVE.B #6,D0
    TRAP #15
    
    ;PRINT empty space
    MOVEA.L #SPACE,A1     
    MOVE.B #13,D0
    TRAP #15
    
    
    CMPA.L A2,A3
    BGT MDSPFUNCTION2L1
    

    MOVEM.L (SP)+, A0-A6/D0-D7    
    BRA pSTART



    SIMHALT             ; halt simulator

* Put variables and constants here

    END    START        ; last line of source

*~Font name~Courier New~
*~Font size~10~
*~Tab type~1~
*~Tab size~4~
